use std::fs::File;
use std::io::prelude::*;
use std::path::Path;

use crate::mapper::mbc1::Mbc1;
use crate::mapper::nombc::NoMbc;
use super::mapper::Mapper;

pub const DMG: [u8; 0x100] = [
    0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
    0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
    0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
    0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
    0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
    0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
    0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
    0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
    0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xE2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
    0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
    0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
    0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
    0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
    0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3C, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C,
    0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x00, 0x00, 0x23, 0x7D, 0xFE, 0x34, 0x20,
    0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x00, 0x00, 0x3E, 0x01, 0xE0, 0x50
];

pub struct Rom {
    pub mbc_type: u8,
    pub rom_size_type: u8,
    pub ram_size_type: u8,
    pub ram_size: usize,
    pub disable_boot_rom: u8,
    pub mapper: Box<dyn Mapper>,
}

impl Rom {
    pub fn new(fname: &String) -> Self {
        let mut f = File::open(fname).expect("File not found.");
        let mut rom = Vec::new();
        f.read_to_end(&mut rom).unwrap();

        let mbc_type = rom[0x147];
        let rom_size_type = rom[0x148];
        let ram_size_type = rom[0x149];
        let mut ram_size = 0;

        println!("MBC TYPE:{}", mbc_type);
        println!("ROM SIZE TYPE:{}", rom_size_type);
        println!("RAM SIZE TYPE:{}", ram_size_type);

        match ram_size_type {
            0 => ram_size = 0,
            1 => ram_size = 0x800,
            2 => ram_size = 0x2000,
            3 => ram_size = 0x8000,
            _ => println!("Invalid RAM SIZE TYPE")
        }

        let mapper: Box<dyn Mapper> = match mbc_type {
            0 => {
                println!("NoMBC");
                Box::new(NoMbc::new(rom))
            }
            1 => {
                println!("MBC1");
                Box::new(Mbc1::new(rom, vec![]))
            },
            3 => {
                println!("MBC1");
                // let save_file = Path::new(fname).with_extension("sav");
                Box::new(Mbc1::new(rom, vec![0; ram_size]))
            }
            _n => panic!("Invalid mapper."),
        };

        Rom {
            mbc_type: mbc_type,
            rom_size_type: rom_size_type,
            ram_size_type: ram_size_type,
            ram_size: ram_size,
            disable_boot_rom: 0,
            mapper: mapper,
        }
    }

    pub fn read(&self, addr: u16) -> u8 {
        let uaddr: usize = addr as usize;
        match uaddr {
            0x0000..=0x00FF => {
                /*
                if self.disable_boot_rom == 0 {
                    return DMG[uaddr];
                }
                */
                self.mapper.read(addr)
            }
            0x0100..=0x7FFF => self.mapper.read(addr),
            _ => 0,
        }
    }

    pub fn write(&mut self, addr: u16, dat: u8) {
        let uaddr: usize = addr as usize;
        match uaddr {
            0x0000..=0x7FFF => self.mapper.write(addr, dat),
            _ => {},
        }
    }
}